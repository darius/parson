// star_thompsonlike_lowlevel.py ported to C ported to itsy
// TODO explicit clarity on signed vs. unsigned

enum { loud = 0 }

to error(plaint: ^char) {
    fprintf(stderr, "%s\n", plaint);
    exit(1);
}

enum { max_insns = 8192, accept = 0 }
enum { op_accept, op_eat, op_fork, op_loop, }

let ninsns:       int;
let accepts, ops: [max_insns]uint8;
let arg1, arg2:   [max_insns]int16;

let names: [4]^char = [   // TODO leave out the 4
    "win", "eat", "fork", "loop",
];

to dump1(pc: int) {
    printf("%c %2u: %-4s ", if accepts[pc] {'*'} else {' '}, pc, names[ops[pc]]);
    printf(if pc == accept {"\n"} else if ops[pc] == op_eat {"'%c' %d\n"} else {"%d %d\n"},
           arg1[pc], arg2[pc]);
}

to dump() {
    let pc: int;
    for pc = ninsns-1; 0 <= pc; --pc {
        dump1(pc);
    }
}

let occupied: [max_insns]uint8;

to after(ch: char, start, end: int, next_states: ^^int) {
    while start != end {
        let r: int = arg1[start];
        let s: int = arg2[start];
        match ops[start] {
            on op_eat {
                if r == ch && !occupied[s] {
                    next_states^++^ = s;
                    occupied[s] = 1;
                }
                return;
            }
            on op_fork {
                after(ch, r, end, next_states);
                start = s;
            }
            on op_loop {
                after(ch, r, start, next_states);
                start = s;
            }
            else {
                error("Can't happen");
            }
        }
    }
}

let states0, states1: [max_insns]int;

to run(start: int, input: ^char): int {
    if accepts[start] {
        return 1;
    }
    let cur_start, cur_end, next_start, next_end: ^int;
    cur_start = states0,  cur_end = cur_start;
    next_start = states1, next_end = next_start;
    cur_end++^ = start;
    memset(occupied, 0, ninsns); // N.B. we could avoid this by always
                                 // finishing the next_start..next_end
                                 // loop below

    for ; input^; ++input {
        let state: ^int;
        for state = cur_start; state < cur_end; ++state {
            after(input^, state^, accept, &next_end);
        }
        for state = next_start; state < next_end; ++state {
            if (accepts[state^]) {
                return 1;
            }
            occupied[state^] = 0;
        }
        let t: ^int = cur_start;
        cur_start = next_start, cur_end = next_end;
        next_start = next_end = t;
    }
    return 0;
}

to emit(op: uint8, r, s: int, accepting: uint8): int {
    if max_insns <= ninsns { error("Pattern too long"); }
    ops[ninsns] = op, arg1[ninsns] = r, arg2[ninsns] = s;
    accepts[ninsns] = accepting;
    return ninsns++;
}

// start, current parsing position
let pattern, pp: ^char;

to eat(c: char): int {
    return if pattern < pp && pp[-1] == c {--pp, 1} else {0};
}

to parsing(precedence, state: int): int {
    let rhs: int;
    if pattern == pp || pp[-1] == '(' || pp[-1] == '|' {
        rhs = state;
    }
    else if eat(')') {
        rhs = parsing(0, state);
        if !eat('(') { error("Mismatched ')'"); }
    }
    else if eat('*') {
        rhs = emit(op_loop, 0, state, accepts[state]); // (0 is a placeholder...
        arg1[rhs] = parsing(6, rhs);                   // ...filled in here.)
    }
    else {
        rhs = emit(op_eat, (--pp)^, state, 0);
    }
    while pattern < pp && pp[-1] != '(' {
        let prec: int = if pp[-1] == '|' {3} else {5};
        if prec <= precedence { break; }
        if eat('|') {
            let rhs2: int = parsing(prec, state);
            rhs = emit(op_fork, rhs, rhs2, accepts[rhs] || accepts[rhs2]);
        }
        else {
            rhs = parsing(prec, rhs);
        }
    }
    return rhs;
}

to parse(string: ^char): int {
    pattern = string; pp = pattern + strlen(pattern);
    ninsns = 0;
    let state: int = parsing(0, emit(op_accept, 0, 0, 1));
    if pattern != pp { error("Bad pattern"); }
    return state;
}

to main(argc: int, argv: ^^char): int {
    if argc != 2 { error("Usage: grep pattern"); }
    let start_state: int = parse(argv[1]);
    if loud {
        printf("start: %u\n", start_state);
        dump();
    }
    let matched: int = 0;
    let line: [9999]char;
    while fgets(line, sizeof line, stdin) {
        if run(start_state, line) {
            fputs(line, stdout);
            matched = 1;
        }
    }
    return !matched;
}
