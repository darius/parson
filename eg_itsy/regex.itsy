# star_thompsonlike_lowlevel.py ported to C ported to itsy
# TODO explicit clarity on signed vs. unsigned

enum Constant {
    loud = 0,
    max_insns = 8192,
    accept = 0,
}

to error(plaint: char@) {
    fprintf(stderr, "%s\n", plaint);
    exit(1);
}

enum Opcode {
    op_accept, op_eat, op_fork, op_loop
}

let ninsns: int;
let accepts: uint8[max_insns];
let ops: uint8[max_insns];
let arg1: int[max_insns];
let arg2: int[max_insns];

array names: char@[4] = {   # TODO leave out the 4
    "win", "eat", "fork", "loop",
}

to dump1(pc: int) {
    printf("%c %2u: %-4s ", if accepts[pc] {'*'} else {' '}, pc, names[ops[pc]]);
    printf(if pc == accept {"\n"} else if ops[pc] == op_eat {"'%c' %d\n"} else {"%d %d\n"},
           arg1[pc], arg2[pc]);
}

let occupied: uint8[max_insns];

to after(ch: char, start: int, end: int, next_states: int@@) {
    while start != end {
        let r: int = arg1[start];
        let s: int = arg2[start];
        switch ops[start] {
            case op_eat {
                if r == ch && !occupied[s] {
                    next_states@++@ = s;
                    occupied[s] = 1;
                }
                return;
            }
            case op_fork {

            }
            case op_loop {

            }
            default {
                error("Can't happen");
            }
        }
    }
}
