# Something like C but re-syntaxed.

top
        : '' declaration* :end.


# Declarations

declaration
        : function_definition
        | decl
        .

function_definition: :position (
          "to" id 
            [:position '(' [param_decl**',' :chain] ')' [':' type | :position :Void] :Signature]
            block  :To
        ).

param_decl
        : id++',' :hug ':' type  :spread_params
        .

decl
        : type_decl
        | var_decl
        .

type_decl: :position (
          "typedef" id '=' type ';'              :Typedef
        | "enum" (id | :None) '{'
              [enumerator**',' :hug] ','?
          '}'                                    :Enum
        | "struct" :'struct' id '{' [field* :chain] '}'  :Record
        | "union"  :'union'  id '{' [field* :chain] '}'  :Record
        ).

field
        : param_decl ';'
        .

enumerator
        : id ('=' elem_exp | :None) :hug
        .

var_decl: :position (
          "let" [id++',' :hug] ':' type ('=' elem_exp | :None) ';'  :Let
        ).


# Types

type:   :position (
          '^' type                                  :Pointer
        | '[' (exp | :None) ']' type                :Array
        | '(' [[type :'' :hug]**',' :hug] ')' type  :Signature
        | "void"                                    :Void
        | id                                        :Type_name
        ).


# Statements

block:  :position (
          '{' [(decl | statement)* :hug] '}'  :Block
        ).

statement
        : block
        | if_stmt
        | :position (
            "while" exp block                       :While
          | "do" block "while" exp ';'              :Do
          | "for" opt_exp ';' opt_exp ';' opt_exp block
                                                    :For
          | "continue" ';'                          :Continue
          | "break" ';'                             :Break
          | "return" opt_exp ';'                    :Return
          | "match" exp '{' [case* :hug] '}'        :Switch
          | opt_exp ';'                             :Exp
          )
        .
opt_exp : exp | :None.

if_stmt : :position (
            "if" exp block ( "else" (if_stmt | block)
                           | :None                   ) :If_stmt
        ).

case:   :position (
          "on" [elem_exp++',' :hug] block  :Case
        | "else"                    block  :Default
        ).


# Expressions

exp
        : assignment_exp (',' assignment_exp :Seq)*
        .

elem_exp = assignment_exp.   # "no comma" expression.

assignment_exp
        : if_exp (assignment_operator assignment_exp :Assign)?
        .

assignment_operator
        : '='   :None
        | '*='  :'*'
        | '/='  :'/'
        | '%='  :'%'
        | '+='  :'+'
        | '-='  :'-'
        | '<<=' :'<<'
        | '>>=' :'>>'
        | '&='  :'&'
        | '@='  :'@'
        | '|='  :'|'
        .

if_exp  : logical_or_exp ("if" logical_or_exp "else" if_exp  :If_exp)?.

logical_or_exp
        : logical_and_exp ('||' logical_and_exp :Or)*
        .

logical_and_exp
        : exp3 ('&&' logical_and_exp :And)*
        .

exp3
        : exp4 ( '=='     :'==' exp4 :Binary_exp
               | '!='     :'!=' exp4 :Binary_exp
               | '<='     :'<=' exp4 :Binary_exp
               | '>='     :'>=' exp4 :Binary_exp
               | '<' !'=' :'<'  exp4 :Binary_exp
               | '>' !'=' :'>'  exp4 :Binary_exp
               )*
        .

exp4
        : exp5 ( '+' !/[+=]/ :'+' exp5 :Binary_exp
               | '-' !/[-=]/ :'-' exp5 :Binary_exp
               | '|' !/[|=]/ :'|' exp5 :Binary_exp
               | '@' !'='    :'@' exp5 :Binary_exp
               )*
        .

exp5
        : exp6 ( '*'  !'='    :'*'  exp6 :Binary_exp
               | '/' !/[=\/]/ :'/'  exp6 :Binary_exp
               | '%'  !'='    :'%'  exp6 :Binary_exp
               | '&'  !/[&=]/ :'&'  exp6 :Binary_exp
               | '<<' !'='    :'<<' exp6 :Binary_exp
               | '>>' !'='    :'>>' exp6 :Binary_exp
               )*
        .

exp6    : unary_exp ( ':' type       :Cast )*.

unary_exp
        : :position (
            '++' unary_exp     :'++' :Pre_incr
          | '--' unary_exp     :'--' :Pre_incr
          | '&' !/[&=]/ unary_exp    :Address_of
          | unary_operator unary_exp :Unary_exp
          | "sizeof" ( ':' type      :Sizeof_type
                     | unary_exp     :Sizeof )
          )
        | postfix_exp
        .

unary_operator
        : '-' !'-' :'-'
        | '~'      :'~'
        | '!' !'=' :'!'
        .

postfix_exp
        : primary_exp
            ( '[' exp ']'                   :Index
            | '(' [elem_exp**',' :hug] ')'  :Call
            | '.' id                        :Dot
            | '^'                           :Deref
            | '++'                    :'++' :Post_incr
            | '--'                    :'--' :Post_incr
            )*
        .

primary_exp
        : '(' exp ')'
        | :position (
             id             :Variable
           | integer        :'integer' :Literal
           | string_literal :'string'  :Literal
           | char_literal   :'char'    :Literal
           | '[' [elem_exp**',' :hug] ','? ']' :Compound_exp
           )
        .

string_literal ~: /("[^"]*")/ FNORD.   # TODO
char_literal   ~: /('[^']*')/ FNORD.  # TODO

FNORD         ~:      whitespace*.
whitespace    ~:      /\s+/ | comment.
comment       ~:      /\/\/.*/.
keyword       ~:      /break|continue|do|else|enum|for|if|let|match|on|return|sizeof|struct|to|typedef|union|void|while/ /\b/.
digit         ~:      /(\d)/.

id:                   !keyword /([A-Za-z_][A-Za-z_0-9]*)/.
integer:              digit+ FNORD :join.    # TODO negative too; and unsigned, etc.
